return(sort(U))
}
# Simulation of an inhomogeneous Poisson process
simulPPi <- function(LAMBDA, quantile_function, Tstar){
# simulate the number of event under a Poisson distribution
N <- rpois(1, LAMBDA(Tstar))
# simulate a uniform sample
U <- runif(N,0,1)
# apply the quantile function (inverse of the cumulative distribution function)
S <- quantile_function(U)
# sort the sample
return(sort(S)[1:N])
}
simulPPi_thining <- function(lambda, placeholder, Tstar) {
# Process to simulate an inhomogeneous Poisson process
# with a given lambda function and Tstar using thinning process.
M = 1.2 * lambda(Tstar)
Ti <- simulPPh(M, Tstar)
n <- length(Ti)
U <- runif(n, min = 0, max = M)
ti <- c()
for (i in 1:n){
if (U[i] < lambda(Ti[i])) {
ti <- c(ti, Ti[i])
}
}
return(sort(ti))
}
# Plot a Poisson process
plot_PP <-function(PP){
# plot the counting process (with jumps = 1):
plot(c(0,PP),seq(0,length(PP)),type="s",xlab="time t",ylab="number of events by time t")
# add the arrival times:
points(PP, rep(0,length(PP)),type="p")
# link the arrival times with the counts:
lines(PP, seq(1,length(PP)),type="h",lty=2)
}
# Decide if we reject H0 or not
decision <- function(pval, alpha) {
if (pval < alpha) {
cat("Reject H0 : lambda is inscreasing\n")
} else {
cat("Accept H0 : lambda is constant\n")
}
}
lambda_exp <- function(t, alpha, beta) {
return(alpha*exp(beta*t))
}
Tstar <- 5
plot(seq(0,Tstar,length.out = 10), lambda_exp(seq(0,Tstar,length.out = 10), alpha = 1, beta = 0), main = "beta = 0 : lambda constant")
plot(seq(0,Tstar,length.out = 10), lambda_exp(seq(0,Tstar,length.out = 10), alpha = 1, beta = 1), main = "beta > 0 : lambda increasing")
# In the homogeneous case, beta = 0, so lambda = alpha
Tstar <- 5
alpha <- 2
lambda <- alpha
PPh1 <- simulPPh(lambda, Tstar)
plot_PP(PPh1)
get_pvalL <- function(PP, Tstar)
{
n <- length(PP)
L_obs <- sum(PP/Tstar)
Z_obs <- (L_obs - n/2)/sqrt(n/12)
# pvalue : smaller value such that we reject H0
pval <- 1 - pnorm(Z_obs)
return(pval)
}
alpha <- 0.05
pval <- get_pvalL(PPh1, Tstar)
cat("P-value : ", pval, "\n")
decision(pval, alpha)
lambda_exp <- function(alpha, beta, Tstar) {
lambda <- function(t) {
return(alpha*exp(beta*t))
}
LAMBDA <- function(t) {
return((alpha/beta)*(exp(beta*t) - 1))
}
quantile_function <- function(p) {
return((1/beta) * log(p*(exp(beta*Tstar) - 1) + 1))
}
return(c(lambda, LAMBDA, quantile_function))
}
Tstar <- 3
alpha <- 1
beta <- 1
expo <- lambda_exp(alpha, beta, Tstar)
lambda <- expo[[1]]
LAMBDA <- expo[[2]]
quantile_function <- expo[[3]]
PPi1 <- simulPPi(LAMBDA, quantile_function, Tstar)
plot_PP(PPi1)
alpha <- 0.05
pval <- get_pvalL(PPi1, Tstar)
cat("P-value : ", pval, "\n")
decision(pval, alpha)
lambda_weib <- function(t, beta, theta) {
return((beta/theta)*(t/theta)**(beta-1))
}
Tstar <- 1
plot(seq(0,Tstar,length.out = 10), lambda_weib(seq(0,Tstar,length.out = 10), beta = 1, theta = 1), main = "beta = 1 : lambda constant")
plot(seq(0,Tstar,length.out = 10), lambda_weib(seq(0,Tstar,length.out = 10), beta = 5, theta = 1), main = "beta > 1 : lambda increasing")
# In the homogeneous case, beta = 1, so lambda = 1/theta
Tstar <- 1
theta <- 0.1
lambda <- 1/theta
PPh2 <- simulPPh(lambda, Tstar)
plot_PP(PPh2)
get_pvalZ <- function(PP, Tstar){
Zobs <- 2*sum(log(Tstar/PP))
N <- length(PP)
# pvalue : smaller value such that we reject H0
pval <- pchisq(Zobs, 2*N)
return(pval)
}
alpha <- 0.05
pval <- get_pvalZ(PPh2, Tstar)
cat("P-value : ", pval, "\n")
decision(pval, alpha)
lambda_weibull <- function(beta, theta, Tstar) {
lambda <- function(t) {
return((beta/theta)*(t/theta)**(beta-1))
}
LAMBDA <- function(t) {
return((t / theta)**beta)
}
quantile_function <- function(p) {
return(Tstar * p**(1/beta))
}
return(c(lambda, LAMBDA, quantile_function))
}
Tstar <- 1
beta <- 3
theta <- 0.5
weib <- lambda_weibull(beta, theta, Tstar)
lambda <- weib[[1]]
LAMBDA <- weib[[2]]
quantile_function <- weib[[3]]
PPi2 <- simulPPi(LAMBDA, quantile_function, Tstar)
plot_PP(PPi2)
alpha <- 0.05
pval <- get_pvalZ(PPi2, Tstar)
cat("P-value : ", pval, "\n")
decision(pval, alpha)
lambda <- 2
Tstar <- 20
PPh3 <- simulPPh(lambda, Tstar)
plot_PP(PPh3)
get_pvalF <- function(PP, Tstar = 1){ # The parameter Tstar here is useless, we add it so that we can use the generic function get_size defined before
n = length(PP)
d = floor(n/2)
F = (n-d)*PP[d]/(d*(PP[n] - PP[d]))
pval = 1. - pf(F, 2*d, 2*(n-d))
return(pval)
}
alpha <- 0.05
pval <- get_pvalF(PPh3)
cat("P-value : ", pval, "\n")
decision(pval, alpha)
# lambda increasing by level, return lambda, LAMBDA, quantile_function
lambda_palier <- function(Tstar=1, tau=0.5, a=1, b=2) {
# a function returning a if t <= tau and b otherwise.
lambda <- function(t) {
return(ifelse(t <= tau, a, b))
}
# return a function returning the primitive of the precedent one.
LAMBDA <- function(t) {
return(ifelse(t <= tau, a*t, a*tau+b*(t-tau)))
}
# return a function returning the inverse of the precedent one.
quantile_function <- function(k) {
return(ifelse(LAMBDA(Tstar)*k<=tau*a, LAMBDA(Tstar)*k/a, (LAMBDA(Tstar)*k-a*tau)/b + tau))
}
return(c(lambda, LAMBDA, quantile_function))
}
Tstar <- 20
tau <- 2/3
a <- 1
b <- 2
palier <- lambda_palier(Tstar, tau*Tstar, a, b)
lambda <- palier[[1]]
LAMBDA <- palier[[2]]
quantile_function <- palier[[3]]
PPi3 <- simulPPi(LAMBDA, quantile_function, Tstar)
plot_PP(PPi3)
alpha <- 0.05
pval <- get_pvalF(PPi3, Tstar)
cat("P-value : ", pval, "\n")
decision(pval, alpha)
PPi4 <- simulPPi_thining(lambda, NULL, Tstar)
plot_PP(PPi4)
alpha <- 0.05
pval <- get_pvalF(PPi4, Tstar)
cat("P-value : ", pval, "\n")
decision(pval, alpha)
library(KScorrect)
get_pvalKS <- function(PP, Tstar = 1) {
N <- length(PP)
W <- PP[2:N] - PP[1:N-1]
D <- LcKS(W, "pexp", nreps = 1999)
pval <- D$p.value
return(pval)
}
Tstar <- 1
plot(seq(0,Tstar,length.out = 10), lambda_weib(seq(0,Tstar,length.out = 10), beta = 1, theta = 1), main = "beta = 1 : lambda constant", type = "l")
plot(seq(0,Tstar,length.out = 10), lambda_weib(seq(0,Tstar,length.out = 10), beta = 5, theta = 1), main = "beta > 1 : lambda increasing", type = "l")
Tstar <- 1
plot(seq(0,Tstar,length.out = 10), lambda_weib(seq(0,Tstar,length.out = 10), beta = 5, theta = 1), main = "beta > 1 : lambda increasing", type = "l")
Tstar <- 1
time <- seq(0,Tstar,length.out = 10)
fct <- lambda_weib(seq(0,Tstar,length.out = 10), beta = 5, theta = 1)
plot(time, fct, main = "beta > 1 : lambda increasing", type = "l")
Tstar <- 1
beta <- 3
theta <- 0.5
weib <- lambda_weibull(beta, theta, Tstar)
lambda <- weib[[1]]
LAMBDA <- weib[[2]]
quantile_function <- weib[[3]]
PPi2 <- simulPPi(LAMBDA, quantile_function, Tstar)
plot_PP(PPi2)
time <- seq(0,Tstar,length.out = 10)
fct <- lambda(seq(0,Tstar,length.out = 10), beta = 5, theta = 1)
Tstar <- 1
beta <- 3
theta <- 0.5
weib <- lambda_weibull(beta, theta, Tstar)
lambda <- weib[[1]]
LAMBDA <- weib[[2]]
quantile_function <- weib[[3]]
PPi2 <- simulPPi(LAMBDA, quantile_function, Tstar)
plot_PP(PPi2)
time <- seq(0,Tstar,length.out = 10)
fct <- lambda(time)
plot(time, fct, main = "beta > 1 : lambda increasing", type = "l")
Tstar <- 20
tau <- 2/3
a <- 1
b <- 2
palier <- lambda_palier(Tstar, tau*Tstar, a, b)
lambda <- palier[[1]]
LAMBDA <- palier[[2]]
quantile_function <- palier[[3]]
PPi3 <- simulPPi(LAMBDA, quantile_function, Tstar)
plot_PP(PPi3)
time <- seq(0,Tstar,length.out = 10)
fct <- lambda(time)
plot(time, fct, main = "Palier", type = "l")
Tstar <- 1
beta <- 3
theta <- 0.5
weib <- lambda_weibull(beta, theta, Tstar)
lambda <- weib[[1]]
LAMBDA <- weib[[2]]
quantile_function <- weib[[3]]
PPi2 <- simulPPi(LAMBDA, quantile_function, Tstar)
plot_PP(PPi2)
time <- seq(0,Tstar,length.out = 10)
fct <- lambda(time)
plot(time, fct, main = "Weibull", type = "l")
Tstar <- 3
alpha <- 1
beta <- 1
expo <- lambda_exp(alpha, beta, Tstar)
lambda <- expo[[1]]
LAMBDA <- expo[[2]]
quantile_function <- expo[[3]]
PPi1 <- simulPPi(LAMBDA, quantile_function, Tstar)
plot_PP(PPi1)
time <- seq(0,Tstar,length.out = 10)
fct <- lambda(time)
plot(time, fct, main = "Exponential", type = "l")
# lambda increasing by level, return lambda, LAMBDA, quantile_function
lambda_ln <- function(Tstar=10, beta=1) {
# a function returning a if t <= tau and b otherwise.
lambda <- function(t) {
return(beta*log(1+t))
}
# return a function returning the primitive of the precedent one.
LAMBDA <- function(t) {
return(beta*((1+t)*log(1+t)-t))
}
# quantile function not computed
return(c(lambda, LAMBDA))
}
Tstar <- 2
time <- seq(0,Tstar,length.out = 10)
fct <- lambda(time)
plot(time, fct, main = "Palier", type = "l")
# lambda increasing by level, return lambda, LAMBDA, quantile_function
lambda_ln <- function(Tstar=10, beta=1) {
# a function returning a if t <= tau and b otherwise.
lambda <- function(t) {
return(beta*log(1+t))
}
# return a function returning the primitive of the precedent one.
LAMBDA <- function(t) {
return(beta*((1+t)*log(1+t)-t))
}
# quantile function not computed
return(c(lambda, LAMBDA))
}
Tstar <- 2
time <- seq(0,Tstar,length.out = 10)
fct <- lambda(time)
plot(time, fct, main = "Logarithmic", type = "l")
Tstar <- 1
time <- seq(0,Tstar,length.out = 10)
fct <- lambda_weib(seq(0,Tstar,length.out = 10), beta = 5, theta = 1)
plot(time, fct, main = "Weibull", type = "l")
time <- seq(0, Tstar, length.out = 20)
plot(time, fct)
time <- seq(0, Tstar, length.out = 20)
fct <- lambda(time)
plot(time, fct)
plot(time, fct, main = "l")
plot(time, fct, main = "Exponential")
plot(time, fct, main = "Exponential", type = "l")
Tstar <- 3
alpha <- 1
beta <- 1
expo <- lambda_exp(alpha, beta, Tstar)
lambda <- expo[[1]]
time <- seq(0, Tstar, length.out = 20)
fct <- lambda(time)
plot(time, fct, main = "Exponential", type = "l")
Tstar <- 1
beta <- 3
theta <- 0.5
weib <- lambda_weibull(beta, theta, Tstar)
lambda <- weib[[1]]
time <- seq(0, Tstar, length.out = 20)
fct <- lambda(time)
plot(time, fct, main = "Weibull", type = "l")
Tstar <- 2
alpha <- 1
beta <- 1
expo <- lambda_exp(alpha, beta, Tstar)
lambda <- expo[[1]]
time <- seq(0, Tstar, length.out = 20)
fct <- lambda(time)
plot(time, fct, main = "Exponential", type = "l")
beta <- 3
theta <- 0.5
weib <- lambda_weibull(beta, theta, Tstar)
lambda <- weib[[1]]
time <- seq(0, Tstar, length.out = 20)
fct <- lambda(time)
plot(time, fct, main = "Weibull", type = "l")
Tstar <- 2
alpha <- 1
beta <- 1
expo <- lambda_exp(alpha, beta, Tstar)
lambda <- expo[[1]]
time <- seq(0, Tstar, length.out = 20)
fct <- lambda(time)
plot(time, fct, main = "Exponential", type = "l")
beta <- 2
theta <- 0.6
weib <- lambda_weibull(beta, theta, Tstar)
lambda <- weib[[1]]
time <- seq(0, Tstar, length.out = 20)
fct <- lambda(time)
plot(time, fct, main = "Weibull", type = "l")
Tstar <- 2
alpha <- 1
beta <- 1
expo <- lambda_exp(alpha, beta, Tstar)
lambda <- expo[[1]]
time <- seq(0, Tstar, length.out = 20)
fct <- lambda(time)
plot(time, fct, main = "Exponential", type = "l")
beta <- 2
theta <- 0.5
weib <- lambda_weibull(beta, theta, Tstar)
lambda <- weib[[1]]
time <- seq(0, Tstar, length.out = 20)
fct <- lambda(time)
plot(time, fct, main = "Weibull", type = "l")
Tstar <- 2
alpha <- 1
beta <- 1
expo <- lambda_exp(alpha, beta, Tstar)
lambda <- expo[[1]]
time <- seq(0, Tstar, length.out = 20)
fct <- lambda(time)
plot(time, fct, main = "Exponential", type = "l")
beta <- 3
theta <- 0.5
weib <- lambda_weibull(beta, theta, Tstar)
lambda <- weib[[1]]
time <- seq(0, Tstar, length.out = 20)
fct <- lambda(time)
plot(time, fct, main = "Weibull", type = "l")
Tstar <- 2
alpha <- 1
beta <- 1
expo <- lambda_exp(alpha, beta, Tstar)
lambda <- expo[[1]]
time <- seq(0, Tstar, length.out = 20)
fct <- lambda(time)
plot(time, fct, main = "Exponential", type = "l")
beta <- 2.5
theta <- 0.5
weib <- lambda_weibull(beta, theta, Tstar)
lambda <- weib[[1]]
time <- seq(0, Tstar, length.out = 20)
fct <- lambda(time)
plot(time, fct, main = "Weibull", type = "l")
Tstar <- 2
alpha <- 1
beta <- 1
expo <- lambda_exp(alpha, beta, Tstar)
lambda <- expo[[1]]
time <- seq(0, Tstar, length.out = 20)
fct <- lambda(time)
plot(time, fct, main = "Exponential", type = "l")
beta <- 2
theta <- 0.5
weib <- lambda_weibull(beta, theta, Tstar)
lambda <- weib[[1]]
time <- seq(0, Tstar, length.out = 20)
fct <- lambda(time)
plot(time, fct, main = "Weibull", type = "l")
Tstar <- 2
alpha <- 1
beta <- 1
expo <- lambda_exp(alpha, beta, Tstar)
lambda <- expo[[1]]
time <- seq(0, Tstar, length.out = 20)
fct <- lambda(time)
plot(time, fct, main = "Exponential", type = "l")
Tstar <- 3
beta <- 2
theta <- 0.5
weib <- lambda_weibull(beta, theta, Tstar)
lambda <- weib[[1]]
time <- seq(0, Tstar, length.out = 20)
fct <- lambda(time)
plot(time, fct, main = "Weibull", type = "l")
Tstar <- 20
tau <- 2/3
a <- 1
b <- 2
palier <- lambda_palier(Tstar, tau*Tstar, a, b)
lambda <- palier[[1]]
time <- seq(0, Tstar, length.out = 20)
fct <- lambda(time)
plot(time, fct, main = "Weibull", type = "l")
Tstar <- 2
alpha <- 1
beta <- 1
expo <- lambda_exp(alpha, beta, Tstar)
lambda <- expo[[1]]
time <- seq(0, Tstar, length.out = 20)
fct <- lambda(time)
plot(time, fct, main = "Exponential", type = "l")
Tstar <- 3
beta <- 2
theta <- 0.5
weib <- lambda_weibull(beta, theta, Tstar)
lambda <- weib[[1]]
time <- seq(0, Tstar, length.out = 20)
fct <- lambda(time)
plot(time, fct, main = "Weibull", type = "l")
Tstar <- 20
tau <- 2/3
a <- 1
b <- 2
palier <- lambda_palier(Tstar, tau*Tstar, a, b)
lambda <- palier[[1]]
time <- seq(0, Tstar, length.out = 20)
fct <- lambda(time)
plot(time, fct, main = "Step", type = "l")
beta_ln <- 7.7
T_star <- 2
ln <- lambda_ln(T, beta_ln)
lambda <- ln[[1]]
time <- seq(0, Tstar, length.out = 20)
fct <- lambda(time)
plot(time, fct, main = "Step", type = "l")
Tstar <- 2
alpha <- 1
beta <- 1
expo <- lambda_exp(alpha, beta, Tstar)
lambda <- expo[[1]]
time <- seq(0, Tstar, length.out = 20)
fct <- lambda(time)
plot(time, fct, main = "Exponential", type = "l")
Tstar <- 3
beta <- 2
theta <- 0.5
weib <- lambda_weibull(beta, theta, Tstar)
lambda <- weib[[1]]
time <- seq(0, Tstar, length.out = 20)
fct <- lambda(time)
plot(time, fct, main = "Weibull", type = "l")
Tstar <- 20
tau <- 2/3
a <- 1
b <- 2
palier <- lambda_palier(Tstar, tau*Tstar, a, b)
lambda <- palier[[1]]
time <- seq(0, Tstar, length.out = 20)
fct <- lambda(time)
plot(time, fct, main = "Step", type = "l")
beta_ln <- 7.7
T_star <- 2
ln <- lambda_ln(T, beta_ln)
lambda <- ln[[1]]
time <- seq(0, Tstar, length.out = 20)
fct <- lambda(time)
plot(time, fct, main = "Logarithmic", type = "l")
